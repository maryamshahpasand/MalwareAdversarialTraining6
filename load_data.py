import numpy as np
# import matplotlib.pyplot as plt
# import sys
# import psutil
# import os
# import csv
from sklearn.feature_extraction.text import CountVectorizer as TC
from sklearn.model_selection import train_test_split
import random
from os import listdir
from os.path import isfile, join
import scipy.sparse

from sklearn.model_selection import GridSearchCV
from sklearn.svm import LinearSVC
import time
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn import metrics

def load_data(loaded =True):

    if loaded:

        # x_ = np.load(
        #     "/home/maryam/Code/data/Drebin_processed_features/129000malware_benign_175features/x_all_binary_features175.npy")
        # y_ = np.load(
        #     "/home/maryam/Code/data/Drebin_processed_features/129000malware_benign_175features/y_all_binary_features175.npy")
        # x_benign_ = np.load(
        #     "/home/maryam/Code/data/Drebin_processed_features/129000malware_benign_175features/x_benign_binary_features175.npy")
        # x_malware = np.load(
        #     "/home/maryam/Code/data/Drebin_processed_features/129000malware_benign_175features/x_malware_binary_features175.npy")
        #
        # ymal = np.ones(len(x_malware))
        # yben = np.zeros(len(x_benign_))
        # xtrain_mal, xtest_mal, ytrain_mal, ytest_mal = train_test_split(x_malware, ymal, test_size=0.3,
        #                                                                             random_state=random.randint(0, 100))
        # xtrain_ben, xtest_ben, ytrain_ben, ytest_ben  = train_test_split(x_benign_, yben, test_size=0.3,
        #                                                                             random_state=random.randint(0, 100))

        # xben, xmal = [], []
        # with open('Data2000.csv', 'r') as csvFile:
        #     reader = csv.reader(csvFile)
        #     for row in reader:
        #         if row[-1] == 'B':
        #             xben.append([int(n) for n in row[0:-2]])
        #         if row[-1] == 'M':
        #             xmal.append([int(n) for n in row[0:-2]])
        #
        #         # print(row)
        #
        # csvFile.close()
        # xben = np.array(xben)
        # xmal = np.array(xmal)
        # x = np.concatenate([xben, xmal])
        # ymal = np.ones(xmal.shape[0])
        # yben = np.zeros(xben.shape[0])
        #
        # xtrain_mal=xmal[0:800]
        # xtrain_ben=xben[0:800]
        # ytrain_mal=ymal[0:800]
        # ytrain_ben=yben[0:800]
        #
        # xtest_mal=xmal[801:]
        # xtest_ben=xben[801:]
        # ytest_mal=ymal[801:]
        # ytest_ben=yben[801:]

        xtrain =scipy.sparse.load_npz('/home/maryam/Code/data/Drebin_processed_features/randomforest_important_features/0.001/x_train.npz' ).toarray()
        ytrain = np.load('/home/maryam/Code/data/Drebin_processed_features/randomforest_important_features/0.001/y_train.npy')
        xtrain_mal=xtrain[np.where(ytrain == 1)]
        xtrain_ben = xtrain[np.where(ytrain == 0)]
        ytrain_mal = ytrain[np.where(ytrain == 1)]
        ytrain_ben = ytrain[np.where(ytrain == 0)]


        xtest = scipy.sparse.load_npz('/home/maryam/Code/data/Drebin_processed_features/randomforest_important_features/0.001/x_test.npz').toarray()
        ytest= np.load('/home/maryam/Code/data/Drebin_processed_features/randomforest_important_features/0.001/y_test.npy')
        features = np.load('/home/maryam/Code/data/Drebin_processed_features/randomforest_important_features/0.001/Drebin_important_features.npy')
        features=np.append(features,[features[len(features)-1]], axis=0)

        xtest_mal = xtest[np.where(ytest == 1)]
        xtest_ben = xtest[np.where(ytest == 0)]
        ytest_mal = ytest[np.where(ytest == 1)]
        ytest_ben = ytest[np.where(ytest == 0)]


        # xtrain_mal =np.load('/home/maryam/Code/data/Drebin_processed_features/129000malware_benign_175features/xtrain_mal.npy' )
        # xtest_mal = np.load('/home/maryam/Code/data/Drebin_processed_features/129000malware_benign_175features/xtest_mal.npy' )
        # ytrain_mal =np.load('/home/maryam/Code/data/Drebin_processed_features/129000malware_benign_175features/ytrain_mal.npy')
        # ytest_mal  = np.load('/home/maryam/Code/data/Drebin_processed_features/129000malware_benign_175features/ytest_mal.npy')
        # xtrain_ben=np.load('/home/maryam/Code/data/Drebin_processed_features/129000malware_benign_175features/xtrain_ben.npy')
        # xtest_ben =np.load('/home/maryam/Code/data/Drebin_processed_features/129000malware_benign_175features/xtest_ben.npy')
        # ytrain_ben = np.load('/home/maryam/Code/data/Drebin_processed_features/129000malware_benign_175features/ytrain_ben.npy')
        # ytest_ben = np.load('/home/maryam/Code/data/Drebin_processed_features/129000malware_benign_175features/ytest_ben.npy')
        # xtrain_mal = scipy.sparse.load_npz('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/xtrain_mal.npz' )
        # ytrain_mal = np.load('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/ytrain_mal.npy' )
        #
        # xtest_mal= scipy.sparse.load_npz('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/xtest_mal.npz' )
        # ytest_mal = np.load('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/ytest_mal.npy' )
        #
        # xtrain_ben = scipy.sparse.load_npz('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/xtrain_ben.npz' )
        # ytrain_ben = np.load('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/ytrain_ben.npy')
        #
        # xtest_ben =scipy.sparse.load_npz('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/xtest_ben.npz')
        # ytest_ben = np.load('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/ytest_ben.npy')
    else:
        mypath = "/home/maryam/Code/data/drebin_malware_apk/feature_vectors/"
        onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]

        print("Reading csv file for ground truth ...")
        ground_truth = np.loadtxt("/home/maryam/Code/data/drebin_malware_apk/sha256_family.csv", delimiter=",", skiprows=1,
                                  dtype=str)

        print("Reading positive and negative texts ...")
        pos = []
        neg = []
        for virus in onlyfiles:
            if virus in ground_truth[:, 0]:
                pos.append(mypath + virus)
            else:
                # if len(neg) < 5560:
                neg.append(mypath + virus)

        print("Loading Malware and Goodware Sample Data")
        AllSampleNames = pos + neg
        print("Loaded samples")

        # FeatureVectorizer = TF(input='filename', encoding ='utf-8', tokenizer=lambda x: x.split('\n'), token_pattern=None,\
        #                        binary=False)
        FeatureCountVectorizer = TC(input='filename', encoding='utf-8', tokenizer=lambda x: x.split('\n'),
                                    token_pattern=None, \
                                    binary=False)
        # x = FeatureVectorizer.fit_transform(pos + neg)
        x_ = FeatureCountVectorizer.fit_transform(pos + neg)
        # print("FeatureVectorizer shape: %d", x.shape)
        print("FeatureCountVectorizer shape: %d", x_.shape)

        # label malware as 1 and goodware as -1
        Mal_labels = np.ones(len(pos))
        Good_labels = np.zeros(len(neg))
        # Good_labels.fill(-1)
        y = np.concatenate((Mal_labels, Good_labels), axis=0)
        print("Label array - generated")
        TestSize = 0.3
        # step 2: split all samples to training set and test set
        xtrain_mal, xtest_mal, ytrain_mal, ytest_mal = train_test_split(x_[0:5560], Mal_labels, test_size=TestSize,
                                                                                    random_state=random.randint(0, 100))
        xtrain_ben, xtest_ben, ytrain_ben, ytest_ben  = train_test_split(x_[5560:], Good_labels, test_size=TestSize,
                                                                                    random_state=random.randint(0, 100))
        # x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=TestSize,
        #                                             random_state=random.randint(0, 100))

        print("Test set split = %s", TestSize)
        print("train-test split done")

        scipy.sparse.save_npz('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/xtrain_mal.npz',xtrain_mal )
        scipy.sparse.save_npz('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/xtest_mal.npz',xtest_mal )
        np.save('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/ytrain_mal.npy',ytrain_mal)
        np.save('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/ytest_mal.npy',ytest_mal)
        scipy.sparse.save_npz('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/xtrain_ben.npz',xtrain_ben)
        scipy.sparse.save_npz('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/xtest_ben.npz',xtest_ben)
        np.save('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/ytrain_ben.npy',ytrain_ben)
        np.save('/home/maryam/Code/data/Drebin_processed_features/129000malware_bening_541000features/ytest_ben.npy',ytest_ben)
        # data = np.load('/home/maryam/Code/python/Malware-GAN-master/data.npz')
        # xben = np.load(
        #     '/home/maryam/Code/python/poisoning_project/datasets/Drebin_Kuafadet/np/x_benign_binary_features.npy')
        # xmal = np.load(
        #     '/home/maryam/Code/python/poisoning_project/datasets/Drebin_Kuafadet/np/x_malware_binary_features.npy')
        # xmal = np.load('/home/maryam/Code/python/poisoning_project/datasets/Drebin_binary_features_11309all_11176unique/x_malware_binary_features.npy')
        # xben = np.load('/home/maryam/Code/python/poisoning_project/datasets/Drebin_binary_features_11309all_11176unique/x_benign_binary_features.npy')
        #
        # xmal = xmal[0:200]
        # ymal = np.ones(len(xmal))

        # xben = xben[0:len(xmal)]
        # xben = xben[0:len(xmal)+1000]
        # yben = np.zeros(len(xben))
        # xmal, ymal, xben, yben = data['xmal'], data['ymal'], data['xben'], data['yben']
        # ymal, yben = np.ones(len(xmal)) , np.zeros(len(xben))
        # same number of malware and bengin samples
        # return [(xmal[0,200], ymal[0,200]), (xben[0,200], yben[0,200])]
        # xtrain_mal, xtest_mal, ytrain_mal, ytest_mal = train_test_split(xmal, ymal, test_size=0.20)
        # xtrain_mal, xtest_mal, ytrain_mal, ytest_mal = train_test_split(xmal, ymal, test_size=0.20)
        # xtrain_ben, xtest_ben, ytrain_ben, ytest_ben = train_test_split(xben, yben, test_size=0.20)


    return [(xtrain_mal, ytrain_mal), (xtrain_ben, ytrain_ben),
            (xtest_mal, xtest_ben), (ytest_mal, ytest_ben)], features
    # return [(xtrain_mal[0:200], ytrain_mal[0:200]), (xtrain_ben[0:1000], ytrain_ben[0:1000]),
    #         (xtest_mal, xtest_ben), (ytest_mal, ytest_ben)]