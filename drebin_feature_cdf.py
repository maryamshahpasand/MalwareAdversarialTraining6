# import load_data
from turtledemo.__main__ import font_sizes
import scipy.misc as misc
import numpy as np
import pandas as pd
import scipy.sparse
import matplotlib.pyplot as plt
import matplotlib as mpl
from matplotlib.ticker import ScalarFormatter

from matplotlib.offsetbox import TextArea, DrawingArea, OffsetImage, AnnotationBbox

# average added features
frams = pd.read_csv('./list_of_added_featuresmanifest.csv')
frams = frams.drop(columns="Unnamed: 0")
frams = frams[0:80]
frams.columns = ['activity', 'hardware', 'intent', 'permission', 'provider',
       'service_receiver']
ax=frams.plot.bar(stacked=True)
ax.set_xlabel('Epoch')
ax.set_ylabel('Average Number of Added Features')

xticks = ax.xaxis.get_major_ticks()
for i in range(80):
    if i%5!=0:
        xticks[i].label1.set_visible(False)

plt.xticks(rotation=0)
plt.savefig('./list_of_added_featuresmanifest.eps', format='eps', dpi=1000,  bbox_inches='tight')
plt.savefig('./list_of_added_featuresmanifest.png', format='eps', dpi=1000,  bbox_inches='tight')
plt.show()

# ### 52 features
fnr =[0.049122807,0.05875576,0.07943662,0.066628702,0.079391892,0.083238958,0.080636002,0.077186964,0.076792772,0.076790831]
#fpr=[0.028728606,0.024223602,0.024824952,0.021383648,0.024203822,0.034177215,0.034069401,0.036944271,0.024126984,0.038725796]
mcr=[99.05601007,99.49141767,99.80842912,92.90826285,99.93585632,96.34703196,54.76963011,28.18181818,25.13020833,15.41450777]
dist=[3.6582,3.4524,5.4498,13.8347,7.111,11.2437,11.0664,10.4908,14.2746,12.8908]
# advsamp=['1,497/3,720','1,468/3,643','1,459/3,660','1,440/3,643','1,296/3,266,','1,432/3,619','1,312/3,422','814/1,902','499/1,607']#,'385']
advsamp=['1,497','1,468','1,459','1,283','1,424,','1,298','802','658','386','301']
fig, ax1 = plt.subplots()
ax1.set_xlabel('Rounds of re-training',  fontsize=15)

plt.xticks(np.arange(len(fnr)), np.arange(1, len(fnr)+1),fontsize=15)

plt.yticks(fontsize=14)
# ax1.set_ylabel('FNR, MCR' ,  fontsize=15)
ax1.set_ylabel('Misclassification Rate(MCR)' ,  fontsize=15)
# ax1.plot(range(len(fnr)), fnr,'-^', markersize=5,label='FNR', linewidth=0.5,  color='black')
# ax1.hlines(y=0.044917258, xmin =0 , xmax= len(fnr)-1, linewidth=1, linestyles='--' ,color='black')
#ax1.plot(range(len(fpr)), fpr,'-v', markersize=5,label='FPR', linewidth=0.5, color='blue')
# ax1.hlines(y=0.034461911, xmin =0 , xmax= len(fnr)-1, linewidth=1, linestyles='--', color='blue')
ax1.plot(range(len(mcr)), mcr,'-s', markersize=5,label='MCR', linewidth=0.5, color='red')
ax1.plot(4.2, 15,'-x',label='Avg.D', color='green')
ax1.hlines(y=99.31120852, xmin =0 , xmax= len(fnr)-1, linewidth=1, linestyles='--' ,color='red')
ax1.yaxis.lablesize=14
ax1.tick_params(axis='y')
ax2 = ax1.twinx()
ax2.set_ylabel('Average Distortion(Avg.D)', fontsize=15)  # we already handled the x-label with ax1
ax2.plot(range(len(dist)), dist,'-x', markersize=5,label='Avg.D', linewidth=0.5, color='green')
ax1.hlines(y=3.06, xmin =0 , xmax= len(fnr)-1, linewidth=1, linestyles='--' ,color='green')
ax2.tick_params(axis='y',labelsize=15)
# ax1.legend(loc='upper center', bbox_to_anchor=(1, -1),  fontsize=20)
# ax1.legend(['FNR', 'FPR','MCR','Avg.D'],loc='center left',  fontsize=12 )
# ax2.legend(['Avg.D'],loc='center left',  fontsize=12 )
fig.tight_layout()  # otherwise the right y-label is slightly clipped
# ax1.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),
#           fancybox=True, shadow=True, ncol=5)
ax3 = ax1.twiny()
ax3.set_xlim(ax1.get_xlim())
ax3.set_xticks(range(len(fnr)))
ax3.set_xticklabels(advsamp ,fontsize=14,horizontalalignment='left',        verticalalignment='bottom')
ax3.set_xlabel(r"# new adv. samples @ round",fontsize=15)
for tick in ax3.get_xticklabels():
    tick.set_rotation(45)
# ax3.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))
# Shrink current axis's height by 10% on the bottom
# box = ax1.get_position()
# ax1.set_position([box.x0, box.y0 + box.height * 0.1,
#                  box.width, box.height * 0.9])
#
# # Put a legend below current axis
# ax1.legend(loc='uper center', bbox_to_anchor=(0.95, -0.15),
#           fancybox=True, shadow=True, ncol=4,fontsize=14)
ax1.legend(loc='center left', bbox_to_anchor=(0.4, 0.18),fontsize=12)

plt.savefig('./MalwareDataset/multiple_rounds_52features_MalJSAM.eps', format='eps', dpi=1000,  bbox_inches='tight')

plt.savefig('./MalwareDataset/multiple_rounds_52features_MalJSAM.png', figsize=(10,5) ,  bbox_inches='tight')
plt.show()


# # #15 features
# fnr =[0.049122807,0.057803468,0.061423651,0.076836158,0.065142857,0.078962211,0.075601375,0.076174112,0.078285714,0.074137931]
# #fpr=[0.028728606,0.026608911,0.023690773,0.024746193,0.023182957,0.025429116,0.036875,0.0375,0.037593985,0.03860523]
# mcr=[98.93,91.98,90.99,51.85,74.79,59.29,23.94,18.63,9.83,10.75]
# dist=[3.61,2.87,4.38,4.77,4.66,5.48,5.77,6.13,4.84,5.93]
# # advsamp=['1,489/3,703','2,837/3,676','1,287/3,282','770/1,855','1,112/2,630','856/2,120','398/818','299/638','149/323']
# advsamp=['1,489','2,837','1,287','770','1,112','856','398','299','149','152']
# # Create some mock data
# fig, ax1 = plt.subplots()
#
#
# ax1.set_xlabel('Rounds of re-training',  fontsize=15)
#
# plt.xticks(np.arange(len(fnr)), np.arange(1, len(fnr)+1),fontsize=15)
#
# plt.yticks(fontsize=14)
# # ax1.set_ylabel('FNR, MCR' ,  fontsize=14)
# ax1.set_ylabel('Misclassification Rate(MCR)' ,  fontsize=15)
#
# # ax1.plot(range(len(fnr)), fnr,'-^', markersize=5,label='FNR', linewidth=0.5,  color='black')
# # ax1.hlines(y=0.044917258, xmin =0 , xmax= len(fnr)-1, linewidth=1, linestyles='--' ,color='black')
# # ax1.plot(range(len(fpr)), fpr,'-v', markersize=5,label='FPR', linewidth=0.5, color='blue')
# #ax1.hlines(y=0.034461911, xmin =0 , xmax= len(fpr)-1, linewidth=1, linestyles='--', color='blue')
# ax1.plot(range(len(mcr)), mcr,'-s', markersize=5,label='MCR', linewidth=0.5, color='red')
# ax1.plot(3.2, 13,'-x',label='Avg.D', color='green')
# ax1.hlines(y=98.81, xmin =0 , xmax= len(fnr)-1, linewidth=1, linestyles='--' ,color='red')
# ax1.yaxis.lablesize=14
# ax1.tick_params(axis='y')
# ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
#
#
# ax2.set_ylabel('Average Distortion(Avg.D)', fontsize=15)  # we already handled the x-label with ax1
# ax2.plot(range(len(dist)), dist,'-x', markersize=5,label='Avg.D', linewidth=0.5, color='green')
# ax1.hlines(y=3.06, xmin =0 , xmax= len(fnr)-1, linewidth=1, linestyles='--' ,color='green')
# ax2.tick_params(axis='y',labelsize=14)
# # ax1.legend(loc='upper center', bbox_to_anchor=(1, -1),  fontsize=20)
# # ax1.legend(['FNR', 'FPR','MCR','Avg.D'],loc='center left',  fontsize=12 )
# # ax2.legend(['Avg.D'],loc='center left',  fontsize=12 )
# fig.tight_layout()  # otherwise the right y-label is slightly clipped
# # ax1.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),
# #           fancybox=True, shadow=True, ncol=5)
# ax3 = ax1.twiny()
# ax3.set_xlim(ax1.get_xlim())
# ax3.set_xticks(range(len(fnr)))
# ax3.set_xticklabels(advsamp ,fontsize=15,horizontalalignment='left',        verticalalignment='bottom')
# ax3.set_xlabel(r"# new adv. samples @ round",fontsize=15)
# for tick in ax3.get_xticklabels():
#     tick.set_rotation(45)
# # ax3.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))
# # Shrink current axis's height by 10% on the bottom
# # box = ax1.get_position()
# # ax1.set_position([box.x0, box.y0 + box.height * 0.1,
# #                  box.width, box.height * 0.9])
# #
# # # Put a legend below current axis
# # ax1.legend(loc='uper center', bbox_to_anchor=(0.95, -0.15),
# #           fancybox=True, shadow=True, ncol=4,fontsize=14)
# ax1.legend(loc='center left', bbox_to_anchor=(0.3, 0.18),fontsize=14)
#
# plt.savefig('./MalwareDataset/multiple_rounds_15features_MalJSAM.eps', format='eps', dpi=1000,  bbox_inches='tight')
#
# plt.savefig('./MalwareDataset/multiple_rounds_15features_MalJSAM.png', figsize=(10,5) ,  bbox_inches='tight')
# plt.show()



#
# MANIFEST MALFGSM Linear SVM
# fnr =[0.091866589,[0.05971968312004875  ,0.058175137783221066  ,0.05798889574336829  ,0.095398429,0.061249241964827165  ,0.06359781950333132  ,,,,]
fnr =[5.97,5.54,5.48, 6.02 ,6.28,6.26,6.52 ,6.61,6.48,6.73]
fpr=[0.057680631,0.096547689,0.104154476,0.107665301,0.091281451,0.087185489,0.073142188,0.074312463,0.067875951,0.055002926,0.053832651]
mcr=[0.5572,0.24761,0.1832,0.2217,0.1899,0.15488,0.1539,0.13951,]
mcr=[94.29,17.75,66.24,50.87,20.83,15.07,0]
# dist=[49.27,19.545901,11.570411,4.242602,15.550431,2.93314,14.535805,5.2705,1.1088,4.372759,4.9664]
dist=[43.81,38.54,40.54,44.9,34.98,21.89,0]
advsamp=['1456','1383','307','842','796','328','303','0']
# Create some mock data
fig, ax1 = plt.subplots()


ax1.set_xlabel('Rounds of re-training',  fontsize=15)

plt.xticks(np.arange(len(mcr)), np.arange(1, len(mcr)+1),fontsize=15)

plt.yticks(fontsize=14)
# ax1.set_ylabel('FNR, FPR, MCR' ,  fontsize=14)
ax1.set_ylabel('Misclassification Rate(MCR)' ,  fontsize=15)
# ax1.plot(range(len(fnr)), fnr,'-^', markersize=5,label='FNR', linewidth=0.5,  color='black')
# ax1.hlines(y=9.18, xmin =0 , xmax= len(fnr)-1, linewidth=1, linestyles='--' ,color='black')
# ax1.plot(range(len(fpr)), fpr,'-v', markersize=5,label='FPR', linewidth=0.5, color='blue')
# ax1.hlines(y=0.034461911, xmin =0 , xmax= len(fpr)-1, linewidth=1, linestyles='--', color='blue')
ax1.plot(range(len(mcr)), mcr,'-s', markersize=5,label='MCR', linewidth=0.5, color='red')
ax1.plot(3,10,'-x',label='Avg.D', color='green' )
ax1.hlines(y=100, xmin =0 , xmax= len(mcr)-1, linewidth=1, linestyles='--' ,color='red')
ax1.yaxis.lablesize=15
ax1.tick_params(axis='y')
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis


ax2.set_ylabel('Average Distortion(Avg.D)', fontsize=15)  # we already handled the x-label with ax1
ax2.plot(range(len(dist)), dist,'-x', markersize=5,label='Avg.D', linewidth=0.5, color='green')
ax1.hlines(y=49.41, xmin =0 , xmax= len(mcr)-1, linewidth=1, linestyles='--' ,color='green')
ax2.tick_params(axis='y',labelsize=15)
# ax1.legend(loc='upper center', bbox_to_anchor=(1, -1),  fontsize=20)
# ax1.legend(['FNR', 'FPR','MCR','Avg.D'],loc='center left',  fontsize=12 )
# ax2.legend(['Avg.D'],loc='center left',  fontsize=12 )
fig.tight_layout()  # otherwise the right y-label is slightly clipped
# ax1.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),
#           fancybox=True, shadow=True, ncol=5)
ax3 = ax1.twiny()
ax3.set_xlim(ax1.get_xlim())
ax3.set_xticks(range(len(mcr)))
ax3.set_xticklabels(advsamp ,fontsize=15)
ax3.set_xlabel(r"# new adv. samples @ round",fontsize=15)
for tick in ax3.get_xticklabels():
    tick.set_rotation(45)
# ax3.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))
# Shrink current axis's height by 10% on the bottom
# box = ax1.get_position()
# ax1.set_position([box.x0, box.y0 + box.height * 0.1,
#                  box.width, box.height * 0.9])

# Put a legend below current axis
ax1.legend(loc='center right',bbox_to_anchor=(0.65, 0.1),fontsize=14)
# ax1.legend(fontsize=12)
plt.savefig('./MalwareDataset/multiple_rounds_fgsmmnifest.eps', format='eps', dpi=1000,  bbox_inches='tight')

plt.savefig('./MalwareDataset/multiple_rounds_fgsmmnifest.png', figsize=(10,5) ,  bbox_inches='tight')
plt.show()


#
#
#
# # #MANIFEST MALGAN linear SVM
# # # fnr =[0.091866589,[0.05971968312004875  ,0.058175137783221066  ,0.05798889574336829  ,0.095398429,0.061249241964827165  ,0.06359781950333132  ,,,,]
# # fnr =[3.38,3.03,2.44,2.14,1.99,1.56,1.756,1.525,1.41,1.47]
# # # fpr=[0.057680631,0.096547689,0.104154476,0.107665301,0.091281451,0.087185489,0.073142188,0.074312463,0.067875951,0.055002926,0.053832651]
# # # mcr=[0.5572,0.24761,0.1832,0.2217,0.1899,0.15488,0.1539,0.13951,]
# # mcr=[99.87,99.47,95.42,99.38,97.35,99.75,92.7,94.9,95.72,93.08]
# # # dist=[49.27,19.545901,11.570411,4.242602,15.550431,2.93314,14.535805,5.2705,1.1088,4.372759,4.9664]
# # dist=[30.54,41.58,38.53,30.82,34.74,33.08,36.079,30.94,39.53,38.99]
# # advsamp=['1590','1587','1570','1542','1570','1581','1574','1511','1505','1506','1496']
# # # Create some mock data
# # fig, ax1 = plt.subplots()
# #
# #
# # ax1.set_xlabel('Rounds of re-training',  fontsize=14)
# #
# # plt.xticks(np.arange(len(fnr)), np.arange(1, len(fnr)+1),fontsize=14)
# #
# # plt.yticks(fontsize=14)
# # ax1.set_ylabel('FNR, MCR' ,  fontsize=14)
# # ax1.plot(range(len(fnr)), fnr,'-^', markersize=5,label='FNR', linewidth=0.5,  color='black')
# # ax1.hlines(y=4.56, xmin =0 , xmax= len(fnr)-1, linewidth=1, linestyles='--' ,color='black')
# # # ax1.plot(range(len(fpr)), fpr,'-v', markersize=5,label='FPR', linewidth=0.5, color='blue')
# # # ax1.hlines(y=0.034461911, xmin =0 , xmax= len(fpr)-1, linewidth=1, linestyles='--', color='blue')
# # ax1.plot(range(len(mcr)), mcr,'-s', markersize=5,label='MCR', linewidth=0.5, color='red')
# # ax1.plot(0,26.98,'-x',label='Avg.D', color='green' )
# # ax1.hlines(y=100, xmin =0 , xmax= len(fnr)-1, linewidth=1, linestyles='--' ,color='red')
# # ax1.yaxis.lablesize=14
# # ax1.tick_params(axis='y')
# # ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
# #
# #
# # ax2.set_ylabel('Average Distortion', fontsize=14)  # we already handled the x-label with ax1
# # ax2.plot(range(len(dist)), dist,'-x', markersize=5,label='Avg.D', linewidth=0.5, color='green')
# # ax1.hlines(y=49.27, xmin =0 , xmax= len(fnr)-1, linewidth=1, linestyles='--' ,color='green')
# # ax2.tick_params(axis='y',labelsize=14)
# # # ax1.legend(loc='upper center', bbox_to_anchor=(1, -1),  fontsize=20)
# # # ax1.legend(['FNR', 'FPR','MCR','Avg.D'],loc='center left',  fontsize=12 )
# # # ax2.legend(['Avg.D'],loc='center left',  fontsize=12 )
# # fig.tight_layout()  # otherwise the right y-label is slightly clipped
# # # ax1.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),
# # #           fancybox=True, shadow=True, ncol=5)
# # ax3 = ax1.twiny()
# # ax3.set_xlim(ax1.get_xlim())
# # ax3.set_xticks(range(len(fnr)))
# # ax3.set_xticklabels(advsamp ,fontsize=14)
# # ax3.set_xlabel(r"# new adv. samples @ round",fontsize=14)
# # for tick in ax3.get_xticklabels():
# #     tick.set_rotation(45)
# # # ax3.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))
# # # Shrink current axis's height by 10% on the bottom
# # # box = ax1.get_position()
# # # ax1.set_position([box.x0, box.y0 + box.height * 0.1,
# # #                  box.width, box.height * 0.9])
# #
# # # Put a legend below current axis
# # ax1.legend(loc='center right',bbox_to_anchor=(0.7, 0.7),fontsize=12)
# # # ax1.legend(fontsize=12)
# # plt.savefig('./MalwareDataset/multiple_rounds_malganmnifest_LSVM.eps', format='eps', dpi=1000,  bbox_inches='tight')
# #
# # plt.savefig('./MalwareDataset/multiple_rounds_malganmnifest_LSVM.png', figsize=(10,5) ,  bbox_inches='tight')
# # plt.show()
#
#
# #MANIFEST MALGAN linear SVM
# # fnr =[0.091866589,[0.05971968312004875  ,0.058175137783221066  ,0.05798889574336829  ,0.095398429,0.061249241964827165  ,0.06359781950333132  ,,,,]
# fnr =[3.38,3.03,2.44,2.14,1.99,1.56,1.756,1.525,1.41,1.47]
# # fpr=[0.057680631,0.096547689,0.104154476,0.107665301,0.091281451,0.087185489,0.073142188,0.074312463,0.067875951,0.055002926,0.053832651]
# # mcr=[0.5572,0.24761,0.1832,0.2217,0.1899,0.15488,0.1539,0.13951,]
# mcr=[99.87,99.47,95.42,99.38,97.35,99.75,92.7,94.9,95.72,93.08]
# # dist=[49.27,19.545901,11.570411,4.242602,15.550431,2.93314,14.535805,5.2705,1.1088,4.372759,4.9664]
# dist=[30.54,41.58,38.53,30.82,34.74,33.08,36.079,30.94,39.53,38.99]
# advsamp=['1590','1587','1570','1542','1570','1581','1574','1511','1505','1506','1496']
# # Create some mock data
# fig, ax1 = plt.subplots()
#
#
# ax1.set_xlabel('Rounds of re-training',  fontsize=14)
#
# plt.xticks(np.arange(len(fnr)), np.arange(1, len(fnr)+1),fontsize=14)
#
# plt.yticks(fontsize=14)
# ax1.set_ylabel('FNR, MCR' ,  fontsize=14)
# ax1.plot(range(len(fnr)), fnr,'-^', markersize=5,label='FNR', linewidth=0.5,  color='black')
# ax1.hlines(y=4.56, xmin =0 , xmax= len(fnr)-1, linewidth=1, linestyles='--' ,color='black')
# # ax1.plot(range(len(fpr)), fpr,'-v', markersize=5,label='FPR', linewidth=0.5, color='blue')
# # ax1.hlines(y=0.034461911, xmin =0 , xmax= len(fpr)-1, linewidth=1, linestyles='--', color='blue')
# ax1.plot(range(len(mcr)), mcr,'-s', markersize=5,label='MCR', linewidth=0.5, color='red')
# ax1.plot(0,26.98,'-x',label='Avg.D', color='green' )
# ax1.hlines(y=100, xmin =0 , xmax= len(fnr)-1, linewidth=1, linestyles='--' ,color='red')
# ax1.yaxis.lablesize=14
# ax1.tick_params(axis='y')
# ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis
#
#
# ax2.set_ylabel('Average Distortion', fontsize=14)  # we already handled the x-label with ax1
# ax2.plot(range(len(dist)), dist,'-x', markersize=5,label='Avg.D', linewidth=0.5, color='green')
# ax1.hlines(y=49.27, xmin =0 , xmax= len(fnr)-1, linewidth=1, linestyles='--' ,color='green')
# ax2.tick_params(axis='y',labelsize=14)
# # ax1.legend(loc='upper center', bbox_to_anchor=(1, -1),  fontsize=20)
# # ax1.legend(['FNR', 'FPR','MCR','Avg.D'],loc='center left',  fontsize=12 )
# # ax2.legend(['Avg.D'],loc='center left',  fontsize=12 )
# fig.tight_layout()  # otherwise the right y-label is slightly clipped
# # ax1.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),
# #           fancybox=True, shadow=True, ncol=5)
# ax3 = ax1.twiny()
# ax3.set_xlim(ax1.get_xlim())
# ax3.set_xticks(range(len(fnr)))
# ax3.set_xticklabels(advsamp ,fontsize=14)
# ax3.set_xlabel(r"# new adv. samples @ round",fontsize=14)
# for tick in ax3.get_xticklabels():
#     tick.set_rotation(45)
# # ax3.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))
# # Shrink current axis's height by 10% on the bottom
# # box = ax1.get_position()
# # ax1.set_position([box.x0, box.y0 + box.height * 0.1,
# #                  box.width, box.height * 0.9])
#
# # Put a legend below current axis
# ax1.legend(loc='center right',bbox_to_anchor=(0.7, 0.7),fontsize=12)
# # ax1.legend(fontsize=12)
# plt.savefig('./MalwareDataset/multiple_rounds_malganmnifest_LSVM.eps', format='eps', dpi=1000,  bbox_inches='tight')
#
# plt.savefig('./MalwareDataset/multiple_rounds_malganmnifest_LSVM.png', figsize=(10,5) ,  bbox_inches='tight')
# plt.show()





#MANIFEST MALGAN linear SVM _new
# x_gen_examples= []
# for i in range(40):
#     x_gen_examples.append(np.load('./MalwareDataset/x_gen_examples_linear_svm_optmalgan_40Round/x_gen_examples_'+str(i)+'.npy'))
# fnr =[0.091866589,[0.05971968312004875  ,0.058175137783221066  ,0.05798889574336829  ,0.095398429,0.061249241964827165  ,0.06359781950333132  ,,,,]
# fnr =[5.97,5.54,5.48, 6.02 ,6.28,6.26,6.52 ,6.61,6.48,6.73]
# fpr=[0.057680631,0.096547689,0.104154476,0.107665301,0.091281451,0.087185489,0.073142188,0.074312463,0.067875951,0.055002926,0.053832651]
mcr=[100,100,99.5654873,99.1266376,99.8736576,98.4790875,96.6349206,93.316359,96.5762274,93.8422065,94.3359375,97.3924381,87.8289474,88.5245902,80.6232811,67.4590749,51.6811398,47.2483686,21.9181689,15.8329111]
# mcr=[94.29,17.75,66.24,50.87,20.83,15.07,0]
# dist=[49.27,19.545901,11.570411,4.242602,15.550431,2.93314,14.535805,5.2705,1.1088,4.372759,4.9664]
dist=[54.81,58.54,49.37,44.9,34.98,37.89,33.19,32.83,30.46,29.15,25.48,26.2,24.72,20.59,18.24,18.99,16.76,12.15,11.89,7.64]
# advsamp=[str(len(x_gen_examples[x])) for x in range(len(x_gen_examples))]
advsamp=['1598','1420','1540','1506','1575','1494','1190','1284','1437','1103','1168','1252','881','947','749','695','582','386','183','101']
# Create some mock data
fig, ax1 = plt.subplots(figsize=(9,5))


ax1.set_xlabel('Rounds of re-training',  fontsize=15)

plt.xticks(np.arange(len(mcr)), np.arange(1, len(mcr)+1),fontsize=15)

plt.yticks(fontsize=14)
# ax1.set_ylabel('FNR, FPR, MCR' ,  fontsize=14)
ax1.set_ylabel('Misclassification Rate(MCR)' ,  fontsize=15)
# ax1.plot(range(len(fnr)), fnr,'-^', markersize=5,label='FNR', linewidth=0.5,  color='black')
# ax1.hlines(y=9.18, xmin =0 , xmax= len(fnr)-1, linewidth=1, linestyles='--' ,color='black')
# ax1.plot(range(len(fpr)), fpr,'-v', markersize=5,label='FPR', linewidth=0.5, color='blue')
# ax1.hlines(y=0.034461911, xmin =0 , xmax= len(fpr)-1, linewidth=1, linestyles='--', color='blue')
ax1.plot(range(len(mcr)), mcr,'-s', markersize=5,label='MCR', linewidth=0.5, color='red')
ax1.plot(10,15,'-x',label='Avg.D', color='green' )
ax1.hlines(y=100, xmin =0 , xmax= len(mcr)-1, linewidth=1, linestyles='--' ,color='red')
ax1.yaxis.lablesize=15
ax1.tick_params(axis='y')
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis


ax2.set_ylabel('Average Distortion(Avg.D)', fontsize=15)  # we already handled the x-label with ax1
ax2.plot(range(len(dist)), dist,'-x', markersize=5,label='Avg.D', linewidth=0.5, color='green')
ax1.hlines(y=96.41, xmin =0 , xmax= len(mcr)-1, linewidth=1, linestyles='--' ,color='green')
ax2.tick_params(axis='y',labelsize=15)
# ax1.legend(loc='upper center', bbox_to_anchor=(1, -1),  fontsize=20)
# ax1.legend(['FNR', 'FPR','MCR','Avg.D'],loc='center left',  fontsize=12 )
# ax2.legend(['Avg.D'],loc='center left',  fontsize=12 )
fig.tight_layout()  # otherwise the right y-label is slightly clipped
# ax1.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),
#           fancybox=True, shadow=True, ncol=5)
ax3 = ax1.twiny()
ax3.set_xlim(ax1.get_xlim())
ax3.set_xticks(range(len(mcr)))
ax3.set_xticklabels(advsamp ,fontsize=15)
ax3.set_xlabel(r"# new adv. samples @ round",fontsize=15)
for tick in ax3.get_xticklabels():
    tick.set_rotation(45)
# ax3.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))
# Shrink current axis's height by 10% on the bottom
# box = ax1.get_position()
# ax1.set_position([box.x0, box.y0 + box.height * 0.1,
#                  box.width, box.height * 0.9])

# Put a legend below current axis
ax1.legend(loc='center right',bbox_to_anchor=(0.59, 0.1),fontsize=14)
# ax1.legend(fontsize=12)
# set(gcf,'Position',[100 100 500 500])
plt.savefig('./MalwareDataset/multiple_rounds_malganmnfst.eps', format='eps', dpi=1000,  bbox_inches='tight')

plt.savefig('./MalwareDataset/multiple_rounds_malganmnfst.png', figsize=(10,5) ,  bbox_inches='tight')
plt.show()



#MANIFEST OPT MALGAN linear SVM
# x_gen_examples= []
# for i in range(40):
#     x_gen_examples.append(np.load('./MalwareDataset/x_gen_examples_linear_svm_optmalgan_40Round/x_gen_examples_'+str(i)+'.npy'))
# fnr =[0.091866589,[0.05971968312004875  ,0.058175137783221066  ,0.05798889574336829  ,0.095398429,0.061249241964827165  ,0.06359781950333132  ,,,,]
# fnr =[5.97,5.54,5.48, 6.02 ,6.28,6.26,6.52 ,6.61,6.48,6.73]
# fpr=[0.057680631,0.096547689,0.104154476,0.107665301,0.091281451,0.087185489,0.073142188,0.074312463,0.067875951,0.055002926,0.053832651]
mcr=[100,98.02648663,94.43001818,83.71591794,93.02345711,89.71046481,87.49242621,86.76707349,84.79182896,80.5959491,76.79390634,63.98338094,52.73695144,57.88972561,54.1331256,54.76508266,53.55751753,47.77979746,40.1843677,40.0017546]
# mcr=[94.29,17.75,66.24,50.87,20.83,15.07,0]
# dist=[49.27,19.545901,11.570411,4.242602,15.550431,2.93314,14.535805,5.2705,1.1088,4.372759,4.9664]
dist=[4.3,4.98,5.9,6.83,4.95,5.19,6.27,6.34,6.86,6.71,6.48,7.2,7.72,6.59,7.24,7.99,8.76,8.15,8.89,9.95]
# advsamp=[str(len(x_gen_examples[x])) for x in range(len(x_gen_examples))]
advsamp=['1710','1585','1647','1034','1654','1482','1503','1525','1492','1275','1301','1217','964','847','899','595','622','568','219','270']
# Create some mock data
fig, ax1 = plt.subplots(figsize=(9,5))


ax1.set_xlabel('Rounds of re-training',  fontsize=15)

plt.xticks(np.arange(len(mcr)), np.arange(1, len(mcr)+1),fontsize=15)

plt.yticks(fontsize=14)
# ax1.set_ylabel('FNR, FPR, MCR' ,  fontsize=14)
ax1.set_ylabel('Misclassification Rate(MCR)' ,  fontsize=15)
# ax1.set_ylim(bottom=0)
# ax1.plot(range(len(fnr)), fnr,'-^', markersize=5,label='FNR', linewidth=0.5,  color='black')
# ax1.hlines(y=9.18, xmin =0 , xmax= len(fnr)-1, linewidth=1, linestyles='--' ,color='black')
# ax1.plot(range(len(fpr)), fpr,'-v', markersize=5,label='FPR', linewidth=0.5, color='blue')
# ax1.hlines(y=0.034461911, xmin =0 , xmax= len(fpr)-1, linewidth=1, linestyles='--', color='blue')
ax1.plot(range(len(mcr)), mcr,'-s', markersize=5,label='MCR', linewidth=0.5, color='red')
ax1.plot(10,15,'-x',label='Avg.D', color='green' )
ax1.hlines(y=100, xmin =0 , xmax= len(mcr)-1, linewidth=1, linestyles='--' ,color='red')
ax1.yaxis.lablesize=15
ax1.tick_params(axis='y')
ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis


ax2.set_ylabel('Average Distortion(Avg.D)', fontsize=15)  # we already handled the x-label with ax1
ax2.plot(range(len(dist)), dist,'-x', markersize=5,label='Avg.D', linewidth=0.5, color='green')
ax1.hlines(y=18.41, xmin =0 , xmax= len(mcr)-1, linewidth=1, linestyles='--' ,color='green')
ax2.tick_params(axis='y',labelsize=15)
# ax1.legend(loc='upper center', bbox_to_anchor=(1, -1),  fontsize=20)
# ax1.legend(['FNR', 'FPR','MCR','Avg.D'],loc='center left',  fontsize=12 )
# ax2.legend(['Avg.D'],loc='center left',  fontsize=12 )
fig.tight_layout()  # otherwise the right y-label is slightly clipped
# ax1.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),
#           fancybox=True, shadow=True, ncol=5)
ax3 = ax1.twiny()
ax3.set_xlim(ax1.get_xlim())
ax3.set_xticks(range(len(mcr)))
ax3.set_xticklabels(advsamp ,fontsize=15)
ax3.set_xlabel(r"# new adv. samples @ round",fontsize=15)
for tick in ax3.get_xticklabels():
    tick.set_rotation(45)
# ax3.xaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))
# Shrink current axis's height by 10% on the bottom
# box = ax1.get_position()
# ax1.set_position([box.x0, box.y0 + box.height * 0.1,
#                  box.width, box.height * 0.9])

# Put a legend below current axis
ax1.legend(loc='center right',bbox_to_anchor=(0.59, 0.1),fontsize=14)
# ax1.legend(fontsize=12)
# set(gcf,'Position',[100 100 500 500])
plt.savefig('./MalwareDataset/multiple_rounds_optmalganmnfst.eps', format='eps', dpi=1000,  bbox_inches='tight')

plt.savefig('./MalwareDataset/multiple_rounds_optmalganmnfst.png', figsize=(10,5) ,  bbox_inches='tight')
plt.show()

#
#
#
#
#




#
#
# # [(xtrain_mal, ytrain_mal), (xtrain_ben, ytrain_ben),(xtest_mal, xtest_ben), (ytest_mal, ytest_ben)], features= load_data.load_data(loaded= True)
#
# xtrain = scipy.sparse.load_npz('./MalwareDataset/x_train.npz').toarray()
# ytrain = np.load('./MalwareDataset/y_train.npy')
# xtrain_mal = xtrain[np.where(ytrain == 1)]
# xtrain_ben = xtrain[np.where(ytrain == 0)]
# ytrain_mal = ytrain[np.where(ytrain == 1)]
# ytrain_ben = ytrain[np.where(ytrain == 0)]
#
# xtest = scipy.sparse.load_npz('./MalwareDataset/x_test.npz').toarray()
# ytest = np.load('./MalwareDataset/y_test.npy')
# features = np.load('./MalwareDataset/Drebin_important_features.npy')
# features = np.append(features, [features[len(features) - 1]], axis=0)
#
# xtest_mal = xtest[np.where(ytest == 1)]
# xtest_ben = xtest[np.where(ytest == 0)]
# ytest_mal = ytest[np.where(ytest == 1)]
# ytest_ben = ytest[np.where(ytest == 0)]
#
# x=np.concatenate([xtrain,xtest])
#
# # print(np.quantile(np.sum(x,axis=1),0.33,axis=1))
#
#
# features = np.load('./MalwareDataset/Drebin_important_features.npy')
# features=np.append(features,[features[len(features)-1]], axis=0)
# hlines= pd.DataFrame(features).groupby(2).count()[1].cumsum()
# # x_axis=[0,0,0,0,0,0,0,0,0,0]
# # for i in range(len(hlines.values)):
# #     if i != len(hlines.values):
# #         if i==0:
# #             x_axis[i] = hlines.values[i]  / 2
# #         else:
# #             x_axis[i] =(hlines.values[i]+hlines.values[i+1])/2
#
# x_mal = np.concatenate([xtrain_mal,xtest_mal])
# x_ben = np.concatenate([xtrain_ben ,xtest_ben ])
# x_ben_number_of_features = np.sum(x_ben, axis=0)
# x_mal_number_of_features = np.sum(x_mal, axis=0)
# x_all_number_of_features = np.sum(np.concatenate([xtrain,xtest]), axis=0)
#
#
#
#
#
#
#
# # x_ben_number_of_features= []
# # for i in range(100):
# #     idx = np.random.randint(0, x_ben.shape[0], x_mal.shape[0])
# #     x_ben = x_ben[idx]
# #
# #     x_ben_number_of_features.append(np.sum(x_ben , axis=0))
# # x_ben_number_of_features= np.mean(x_ben_number_of_features , axis=0)
#
# x_ben_number_of_features = np.sum(x_ben, axis=0)
#
#
# key=['features' ,'number_of_occurance']
#
# value = [features[:,1], x_mal_number_of_features]
# mal_dictionary = dict(zip(key, value))
#
# value = [features[:,1], x_ben_number_of_features]
# ben_dictionary = dict(zip(key, value))
#
#
# value = [features[:,1], x_all_number_of_features]
# all_dictionary = dict(zip(key, value))
#
#
#
# mal_df = pd.DataFrame(mal_dictionary, columns = ['features' ,'number_of_occurance'])
# ben_df = pd.DataFrame(ben_dictionary, columns = ['features' ,'number_of_occurance'])
# all_df = pd.DataFrame(all_dictionary, columns = ['features' ,'number_of_occurance'])
#
#
# #average present features in manifest
# # sum([ben_bars_dict_[x]/(x_ben.shape[0]) for x in range(len(ben_bars_dict_))][i] for i in [0,5,6,7,8,9])
#
#
#
#
# #++++++++++++++++++++++++++++++++++++++++++++++++
# ##############len wants this chart instaad of cdf
# ml_bars=[sum(mal_df['number_of_occurance'][0:hlines[hlines.index[0]]-1])]
# ben_bars=[sum(ben_df['number_of_occurance'][0:hlines[hlines.index[0]]-1])]
# for i in range(len(hlines.index)-1):
#     ml_bars.append(sum(mal_df['number_of_occurance'][hlines[hlines.index[i]]:hlines[hlines.index[i+1]]-1]))
#     ben_bars.append(sum(ben_df['number_of_occurance'][hlines[hlines.index[i]]:hlines[hlines.index[i+1]]-1]))
#
# ml_bars_dict =sorted(dict(zip(hlines.index, ml_bars)).items(),key = lambda x : x[1], reverse=True)
# ml_bars_dict_= [x[1] for x in ml_bars_dict]
# ben_bars_dict =sorted(dict(zip(hlines.index, ben_bars)).items(),key = lambda x : x[1], reverse=True)
# ben_bars_dict_= [x[1] for x in ben_bars_dict]
#
# featues_on_chart = [x[0] for x in ml_bars_dict]
#
# fig, ax = plt.subplots()
# index = np.arange(len(hlines))
# bar_width = 0.35
# opacity = 0.8
#
# rects1 = plt.bar(index, ml_bars_dict_, bar_width,
# alpha=opacity,
# color='black',
# label='Malware samples')
#
# rects2 = plt.bar(index + bar_width, ben_bars_dict_, bar_width,
# alpha=opacity,
# color='blue',
# label='Benign Samples')
#
# feature_lables=[]
# for i  in range(len(featues_on_chart)):
#     if featues_on_chart[i] in ['feature', 'permission', 'activity', 'service_receiver', 'provider', 'intent']:
#         feature_lables.append('*' + featues_on_chart[i])
#     else:
#         feature_lables.append(featues_on_chart[i])
# plt.xlabel('Feature Category')
# plt.ylabel('Number of Present Features')
# plt.title('Present Features in Samples')
# plt.xticks(index+(bar_width/2) , feature_lables,rotation='vertical')
# ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))
# plt.legend()
#
# plt.tight_layout()
# plt.annotate('* indicates the categories with features extacted from Manifest file', (0,0), (0, -120), xycoords='axes fraction', textcoords='offset points', va='top')
# plt.savefig('./MalwareDataset/present_features_barchart.eps', format='eps', dpi=1000,  bbox_inches='tight')
# plt.savefig('./MalwareDataset/present_features_barchart.png', figsize=(10,5) ,  bbox_inches='tight')
# plt.savefig('./MalwareDataset/present_features_barchart.png',  figsize=(1,0.5) ,  bbox_inches='tight')
# plt.show()
#
# ############len wants this chart instaad of cdf
# # ++++++++++++++++++++++++++++++++++++++++++++++++
#
#
#
# mal_df['cumsum'] = (1.0/(np.cumsum(x_mal_number_of_features)[-1]))*np.cumsum(x_mal_number_of_features)
# ben_df['cumsum'] = (1.0/(np.cumsum(x_ben_number_of_features)[-1]))*np.cumsum(x_ben_number_of_features)
# all_df['cumsum'] = (1.0/(np.cumsum(x_all_number_of_features)[-1]))*np.cumsum(x_all_number_of_features)
#
# #
# # from sklearn.preprocessing import MinMaxScaler
# # # call MinMaxScaler object
# # min_max_scaler = MinMaxScaler()
# # # feed in a numpy array
# # X_train_norm = min_max_scaler.fit_transform(X_train.values)
# # # wrap it up if you need a dataframe
# # df = pd.DataFrame(X_train_norm)
#
#
# # ax = mal_df['number_of_occurance'].cumsum().plot( c='black',label='Malware samples')
# # ax = ben_df['number_of_occurance'].cumsum().plot( c='blue',label='Benign Samples')
# ax = mal_df['cumsum'].plot( c='black',label='Malware samples')
# ax = ben_df['cumsum'].plot( c='blue',label='Benign Samples')
# # ax = all_df['cumsum'].plot( c='black',label='all Samples')
# # ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))
# ax.set_facecolor('#EAECEE')
# # plt.ylim(-10000, mal_df['number_of_occurance'].cumsum().iloc[-1]+5000)
# plt.ylim(-0.01, mal_df['cumsum'].iloc[-1]+0.005)
# plt.xlim(0, mal_df.shape[0]+10)
# plt.grid(True ,c='white',    linestyle='--')
# ax.legend(['Malware samples', 'Benign Samples'] ,loc='lower right')
# ax.set_title("Feature Index(Optimized Feature Set)" , fontsize=12 )
# # ax.set_major_formatter(ScalarFormatter())
# # ax.get_yaxis().set_major_formatter(ScalarFormatter())
# # plt.ticklabel_format(style='sci', axis='y', scilimits=(-5,5) ,useMathText=True)
# # ax.yaxis.offsetText.set_visible(False)
# ax.yaxis.lablesize=20
# ax.set_ylabel("Present Features in Samples CDF " , fontsize=12)# +  r'$\left(\mathregular{10^{5}}\right)$' , fontsize=12 )
# ax.xaxis.tick_top()
# for i  in range(len(hlines.index)):
#     if hlines.index[i]!='provider':
#         # ax.vlines(x=hlines[index], ymin =-10000 , ymax= mal_df['number_of_occurance'].cumsum().iloc[-1]+10000, linewidth=0.5, color='black')
#         ax.vlines(x=hlines[hlines.index[i]], ymin =-0.01 , ymax= mal_df['number_of_occurance'].cumsum().iloc[-1]+0.01, linewidth=0.5, color='black')
#         if hlines.index[i] in ['permission' , 'activity' , 'service_receiver' , 'provider' , 'intent']:
#             index_= '*'+hlines.index[i]
#         elif hlines.index[i] in ['feature']:
#             index_ = '*hardware'
#         else:
#             index_ = hlines.index[i]
#         if hlines.index[i] =='service_receiver':
#             index_ = '*receiver'
#             ax.text(x=(hlines[hlines.index[i]] + hlines[hlines.index[i - 1]]) / 2, y=-0.01, s=index_,
#                     rotation='vertical', horizontalalignment='center', verticalalignment='top', fontsize=12)
#         else:
#             # ax.text(x=hlines[index], y=-10000, s=index_ ,rotation='vertical',horizontalalignment='center',        verticalalignment='top', fontsize=12)
#             if i == 0:
#                 ax.text(x=(hlines[hlines.index[i]]) / 2, y=-0.01, s=index_ ,rotation='vertical',horizontalalignment='center',        verticalalignment='top', fontsize=12)
#             else:
#                 ax.text(x=(hlines[hlines.index[i]]+hlines[hlines.index[i-1]])/2, y=-0.01, s=index_ ,rotation='vertical',horizontalalignment='center',        verticalalignment='top', fontsize=12)
#
#
# # mpl.style.use('ggplot')
# logo =misc.imresize(plt.imread('./MalwareDataset/arrow2.png'),0.17)
# # logo = OffsetImage(logo, zoom=0.2)
#
# # ax.figure.figimage(logo, 10, 40, alpha=.15, zorder=1)
# ax.figure.figimage(logo, 210, 250, zorder=1)
# # ax.hlines(y=mal_df['cumsum'][hlines['call']], xmin =0 , xmax= mal_df.shape[0]+10, linewidth=0.2, color='black')
# # ax.text(x=mal_df.shape[0]+50, y=mal_df['cumsum'][hlines['call']], s=mal_df['cumsum'][hlines['call']].round(2), rotation='horizontal', horizontalalignment='right', verticalalignment='center',
# #         fontsize=10 )
# # ax.hlines(y=ben_df['cumsum'][hlines['call']], xmin =0 , xmax= mal_df.shape[0]+10, linewidth=0.2, color='black')
# # ax.text(x=mal_df.shape[0]+50, y=ben_df['cumsum'][hlines['call']], s=ben_df['cumsum'][hlines['call']].round(2), rotation='horizontal', horizontalalignment='right', verticalalignment='center',
# #         fontsize=10 , color='blue')
# #
# # ax.hlines(y=mal_df['cumsum'][hlines['permission']], xmin =0 , xmax= mal_df.shape[0]+10, linewidth=0.2, color='black')
# # ax.text(x=mal_df.shape[0]+50, y=mal_df['cumsum'][hlines['permission']]-0.01, s=mal_df['cumsum'][hlines['permission']].round(2), rotation='horizontal', horizontalalignment='right', verticalalignment='bottom',
# #         fontsize=10)
# # ax.hlines(y=ben_df['cumsum'][hlines['permission']], xmin =0 , xmax= mal_df.shape[0]+10, linewidth=0.2, color='black')
# # ax.text(x=mal_df.shape[0]+50, y=ben_df['cumsum'][hlines['permission']]+0.01, s=ben_df['cumsum'][hlines['permission']].round(2), rotation='horizontal', horizontalalignment='right', verticalalignment='top',
# #         fontsize=10, color='blue')
#
#
#
#
# # ax.hlines(y=mal_df['cumsum'][hlines['activity']], xmin =0 , xmax= mal_df.shape[0]+10, linewidth=0.2, color='black')
# # ax.text(x=mal_df.shape[0]+50, y=mal_df['cumsum'][hlines['activity']]+0.002, s=mal_df['cumsum'][hlines['activity']].round(2), rotation='horizontal', horizontalalignment='right', verticalalignment='bottom',
# #         fontsize=10)
# # ax.hlines(y=ben_df['cumsum'][hlines['activity']], xmin =0 , xmax= mal_df.shape[0]+10, linewidth=0.2, color='black')
# # ax.text(x=mal_df.shape[0]+50, y=ben_df['cumsum'][hlines['activity']], s=ben_df['cumsum'][hlines['activity']].round(2), rotation='horizontal', horizontalalignment='right', verticalalignment='top',
# #         fontsize=10, color='blue')
# #
# #
# # ax.hlines(y=ben_df['cumsum'][hlines['feature']], xmin =0 , xmax= mal_df.shape[0]+10, linewidth=0.2, color='black')
# # ax.text(x=mal_df.shape[0]+50, y=ben_df['cumsum'][hlines['feature']], s=ben_df['cumsum'][hlines['feature']].round(2), rotation='horizontal', horizontalalignment='right', verticalalignment='top',
# #         fontsize=10, color='blue')
#
#
#
#
# # plt.rcParams["figure.figsize"] = (10,3)
# plt.savefig('./MalwareDataset/cdf_arw.eps', format='eps', dpi=1000,  bbox_inches='tight')
# plt.savefig('./MalwareDataset/cdf_arw.png', figsize=(10,5) ,  bbox_inches='tight')
# # plt.savefig('./MalwareDataset/cdf_arw.png' ,  bbox_inches='tight')
# # plt.savefig('./MalwareDataset/cdf2.png',  figsize=(1,0.5) ,  bbox_inches='tight')
# plt.show()
#
#
# plt.close()



#################################

"""


ax = mal_df['number_of_occurance'].cumsum().plot( c='black',label='Malware samples')
ax = ben_df['number_of_occurance'].cumsum().plot( c='blue',label='Benign Samples')
ax.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.0f}'))
ax.set_facecolor('#EAECEE')
plt.ylim(-10000, mal_df['number_of_occurance'].cumsum().iloc[-1]+5000)
plt.xlim(0, mal_df.shape[0]+10)
plt.grid(True ,c='white',    linestyle='--')
ax.legend(['Malware samples', 'Benign Samples'] ,loc='lower right')
ax.set_title("Feature Index(Optimized Feature Set)" , fontsize=12 )
# ax.set_major_formatter(ScalarFormatter())
ax.get_yaxis().set_major_formatter(ScalarFormatter())
plt.ticklabel_format(style='sci', axis='y', scilimits=(-5,5) ,useMathText=True)
ax.yaxis.offsetText.set_visible(False)
ax.yaxis.lablesize=20
ax.set_ylabel("Present Features in Samples CDF " +  r'$\left(\mathregular{10^{5}}\right)$' , fontsize=12 )
ax.xaxis.tick_top()

for i  in range(len(hlines.index)):
    if hlines.index[i]!='provider':
        ax.vlines(x=hlines[hlines.index[i]], ymin=-10000, ymax=mal_df['number_of_occurance'].cumsum().iloc[-1] + 10000,
                  linewidth=0.5, color='black')
        if hlines.index[i] in ['feature', 'permission', 'activity', 'service_receiver', 'provider', 'intent']:
            index_ = '*' + hlines.index[i]
        else:
            index_ = hlines.index[i]
        if hlines.index[i] == 'service_receiver':
            index_ = '*receiver'
            # ax.text(x=hlines[hlines.index[i]] + 2, y=mal_df['number_of_occurance'].cumsum().iloc[hlines[hlines.index[i]] - 1] + abs(
            #     mal_df['number_of_occurance'].cumsum().iloc[hlines[hlines.index[i]] - 1] -
            #     ben_df['number_of_occurance'].cumsum().iloc[hlines[hlines.index[i]] - 1]) / 2,
            #         s=abs(mal_df['number_of_occurance'].cumsum().iloc[hlines[hlines.index[i]] - 1] -
            #               ben_df['number_of_occurance'].cumsum().iloc[hlines[hlines.index[i]] - 1]).round(2))
        else:
            if i==0:
                ax.text(x=(hlines[hlines.index[i]]) / 2, y=-10000, s=index_,
                        rotation='vertical', horizontalalignment='center',
                        verticalalignment='top', fontsize=12)
            else:
                ax.text(x=(hlines[hlines.index[i]]+hlines[hlines.index[i-1]])/2, y=-10000, s=index_, rotation='vertical', horizontalalignment='center',
                    verticalalignment='top', fontsize=12)
# for index  in hlines.index:
#     if index!='provider':
#         ax.vlines(x=hlines[index], ymin =-10000 , ymax= mal_df['number_of_occurance'].cumsum().iloc[-1]+10000, linewidth=0.5, color='black')
#         if index in ['feature' , 'permission' , 'activity' , 'service_receiver' , 'provider' , 'intent']:
#             index_= '*'+index
#         else:
#             index_ = index
#         if index =='service_receiver':
#             index_ = '*receiver'
#             ax.text(x=hlines[index], y=-10000, s=index_ ,rotation='vertical',horizontalalignment='center',        verticalalignment='top', fontsize=12)
#             ax.text(x=hlines[index] + 2, y=mal_df['number_of_occurance'].cumsum().iloc[hlines[index] - 1] + abs(
#                 mal_df['number_of_occurance'].cumsum().iloc[hlines[index] - 1] -
#                 ben_df['number_of_occurance'].cumsum().iloc[hlines[index] - 1]) / 2,
#                     s=abs(mal_df['number_of_occurance'].cumsum().iloc[hlines[index] - 1] -
#                           ben_df['number_of_occurance'].cumsum().iloc[hlines[index] - 1]).round(2))
#         else:
#             ax.text(x=hlines[index], y=-10000, s=index_ ,rotation='vertical',horizontalalignment='center',        verticalalignment='top', fontsize=12)





ax.hlines(y=mal_df['cumsum'][hlines['call']], xmin =0 , xmax= mal_df.shape[0]+10, linewidth=0.2, color='black')
ax.text(x=mal_df.shape[0]+50, y=mal_df['cumsum'][hlines['call']], s=mal_df['cumsum'][hlines['call']].round(2), rotation='horizontal', horizontalalignment='right', verticalalignment='center',
        fontsize=10 )
ax.hlines(y=ben_df['cumsum'][hlines['call']], xmin =0 , xmax= mal_df.shape[0]+10, linewidth=0.2, color='black')
ax.text(x=mal_df.shape[0]+50, y=ben_df['cumsum'][hlines['call']], s=ben_df['cumsum'][hlines['call']].round(2), rotation='horizontal', horizontalalignment='right', verticalalignment='center',
        fontsize=10 , color='blue')

ax.hlines(y=mal_df['cumsum'][hlines['permission']], xmin =0 , xmax= mal_df.shape[0]+10, linewidth=0.2, color='black')
ax.text(x=mal_df.shape[0]+50, y=mal_df['cumsum'][hlines['permission']]+0.002, s=mal_df['cumsum'][hlines['permission']].round(2), rotation='horizontal', horizontalalignment='right', verticalalignment='bottom',
        fontsize=10)
ax.hlines(y=ben_df['cumsum'][hlines['permission']], xmin =0 , xmax= mal_df.shape[0]+10, linewidth=0.2, color='black')
ax.text(x=mal_df.shape[0]+50, y=ben_df['cumsum'][hlines['permission']], s=ben_df['cumsum'][hlines['permission']].round(2), rotation='horizontal', horizontalalignment='right', verticalalignment='top',
        fontsize=10, color='blue')


ax.hlines(y=mal_df['cumsum'][hlines['activity']], xmin =0 , xmax= mal_df.shape[0]+10, linewidth=0.2, color='black')
ax.text(x=mal_df.shape[0]+50, y=mal_df['cumsum'][hlines['activity']]+0.002, s=mal_df['cumsum'][hlines['activity']].round(2), rotation='horizontal', horizontalalignment='right', verticalalignment='bottom',
        fontsize=10)
ax.hlines(y=ben_df['cumsum'][hlines['activity']], xmin =0 , xmax= mal_df.shape[0]+10, linewidth=0.2, color='black')
ax.text(x=mal_df.shape[0]+50, y=ben_df['cumsum'][hlines['activity']], s=ben_df['cumsum'][hlines['activity']].round(2), rotation='horizontal', horizontalalignment='right', verticalalignment='top',
        fontsize=10, color='blue')


ax.hlines(y=ben_df['cumsum'][hlines['feature']], xmin =0 , xmax= mal_df.shape[0]+10, linewidth=0.2, color='black')
ax.text(x=mal_df.shape[0]+50, y=ben_df['cumsum'][hlines['feature']], s=ben_df['cumsum'][hlines['feature']].round(2), rotation='horizontal', horizontalalignment='right', verticalalignment='top',
        fontsize=10, color='blue')



plt.savefig('./MalwareDataset/cdf1.eps', format='eps', dpi=1000, bbox_inches='tight')
plt.show()

#
#
"""